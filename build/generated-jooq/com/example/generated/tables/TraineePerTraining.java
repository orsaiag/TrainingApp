/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.Keys;
import com.example.generated.Public;
import com.example.generated.tables.records.TraineePerTrainingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TraineePerTraining extends TableImpl<TraineePerTrainingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trainee_per_training</code>
     */
    public static final TraineePerTraining TRAINEE_PER_TRAINING = new TraineePerTraining();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraineePerTrainingRecord> getRecordType() {
        return TraineePerTrainingRecord.class;
    }

    /**
     * The column <code>public.trainee_per_training.id</code>.
     */
    public final TableField<TraineePerTrainingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.trainee_per_training.trainee_id</code>.
     */
    public final TableField<TraineePerTrainingRecord, Long> TRAINEE_ID = createField(DSL.name("trainee_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.trainee_per_training.training_id</code>.
     */
    public final TableField<TraineePerTrainingRecord, Long> TRAINING_ID = createField(DSL.name("training_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.trainee_per_training.date</code>.
     */
    public final TableField<TraineePerTrainingRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private TraineePerTraining(Name alias, Table<TraineePerTrainingRecord> aliased) {
        this(alias, aliased, null);
    }

    private TraineePerTraining(Name alias, Table<TraineePerTrainingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.trainee_per_training</code> table
     * reference
     */
    public TraineePerTraining(String alias) {
        this(DSL.name(alias), TRAINEE_PER_TRAINING);
    }

    /**
     * Create an aliased <code>public.trainee_per_training</code> table
     * reference
     */
    public TraineePerTraining(Name alias) {
        this(alias, TRAINEE_PER_TRAINING);
    }

    /**
     * Create a <code>public.trainee_per_training</code> table reference
     */
    public TraineePerTraining() {
        this(DSL.name("trainee_per_training"), null);
    }

    public <O extends Record> TraineePerTraining(Table<O> child, ForeignKey<O, TraineePerTrainingRecord> key) {
        super(child, key, TRAINEE_PER_TRAINING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TraineePerTrainingRecord, Long> getIdentity() {
        return (Identity<TraineePerTrainingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TraineePerTrainingRecord> getPrimaryKey() {
        return Keys.TRAINEE_PER_TRAINING_PKEY;
    }

    @Override
    public List<UniqueKey<TraineePerTrainingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TRAINING_TRAINEE);
    }

    @Override
    public TraineePerTraining as(String alias) {
        return new TraineePerTraining(DSL.name(alias), this);
    }

    @Override
    public TraineePerTraining as(Name alias) {
        return new TraineePerTraining(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TraineePerTraining rename(String name) {
        return new TraineePerTraining(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TraineePerTraining rename(Name name) {
        return new TraineePerTraining(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
