/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.Keys;
import com.example.generated.Public;
import com.example.generated.tables.records.TraineeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trainee extends TableImpl<TraineeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trainee</code>
     */
    public static final Trainee TRAINEE = new Trainee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TraineeRecord> getRecordType() {
        return TraineeRecord.class;
    }

    /**
     * The column <code>public.trainee.name</code>.
     */
    public final TableField<TraineeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.trainee.id</code>.
     */
    public final TableField<TraineeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('\"Trainees_id_seq\"'::regclass)", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.trainee.phone</code>.
     */
    public final TableField<TraineeRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.trainee.payment_method</code>.
     */
    public final TableField<TraineeRecord, String> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.trainee.note</code>.
     */
    public final TableField<TraineeRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.trainee.membership</code>.
     */
    public final TableField<TraineeRecord, Long> MEMBERSHIP = createField(DSL.name("membership"), SQLDataType.BIGINT, this, "");

    private Trainee(Name alias, Table<TraineeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trainee(Name alias, Table<TraineeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.trainee</code> table reference
     */
    public Trainee(String alias) {
        this(DSL.name(alias), TRAINEE);
    }

    /**
     * Create an aliased <code>public.trainee</code> table reference
     */
    public Trainee(Name alias) {
        this(alias, TRAINEE);
    }

    /**
     * Create a <code>public.trainee</code> table reference
     */
    public Trainee() {
        this(DSL.name("trainee"), null);
    }

    public <O extends Record> Trainee(Table<O> child, ForeignKey<O, TraineeRecord> key) {
        super(child, key, TRAINEE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TraineeRecord> getPrimaryKey() {
        return Keys.TRAINEES_PKEY;
    }

    @Override
    public Trainee as(String alias) {
        return new Trainee(DSL.name(alias), this);
    }

    @Override
    public Trainee as(Name alias) {
        return new Trainee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trainee rename(String name) {
        return new Trainee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trainee rename(Name name) {
        return new Trainee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Long, String, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
