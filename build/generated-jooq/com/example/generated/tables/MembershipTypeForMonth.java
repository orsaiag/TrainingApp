/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.Keys;
import com.example.generated.Public;
import com.example.generated.tables.records.MembershipTypeForMonthRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MembershipTypeForMonth extends TableImpl<MembershipTypeForMonthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.membership_type_for_month</code>
     */
    public static final MembershipTypeForMonth MEMBERSHIP_TYPE_FOR_MONTH = new MembershipTypeForMonth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MembershipTypeForMonthRecord> getRecordType() {
        return MembershipTypeForMonthRecord.class;
    }

    /**
     * The column <code>public.membership_type_for_month.name</code>.
     */
    public final TableField<MembershipTypeForMonthRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.membership_type_for_month.price</code>.
     */
    public final TableField<MembershipTypeForMonthRecord, Long> PRICE = createField(DSL.name("price"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.membership_type_for_month.id</code>.
     */
    public final TableField<MembershipTypeForMonthRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('\"Membership_type_for_month_id_seq\"'::regclass)", SQLDataType.BIGINT)), this, "");

    private MembershipTypeForMonth(Name alias, Table<MembershipTypeForMonthRecord> aliased) {
        this(alias, aliased, null);
    }

    private MembershipTypeForMonth(Name alias, Table<MembershipTypeForMonthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.membership_type_for_month</code> table
     * reference
     */
    public MembershipTypeForMonth(String alias) {
        this(DSL.name(alias), MEMBERSHIP_TYPE_FOR_MONTH);
    }

    /**
     * Create an aliased <code>public.membership_type_for_month</code> table
     * reference
     */
    public MembershipTypeForMonth(Name alias) {
        this(alias, MEMBERSHIP_TYPE_FOR_MONTH);
    }

    /**
     * Create a <code>public.membership_type_for_month</code> table reference
     */
    public MembershipTypeForMonth() {
        this(DSL.name("membership_type_for_month"), null);
    }

    public <O extends Record> MembershipTypeForMonth(Table<O> child, ForeignKey<O, MembershipTypeForMonthRecord> key) {
        super(child, key, MEMBERSHIP_TYPE_FOR_MONTH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MembershipTypeForMonthRecord> getPrimaryKey() {
        return Keys.MEMBERSHIP_TYPE_FOR_MONTH_PKEY;
    }

    @Override
    public MembershipTypeForMonth as(String alias) {
        return new MembershipTypeForMonth(DSL.name(alias), this);
    }

    @Override
    public MembershipTypeForMonth as(Name alias) {
        return new MembershipTypeForMonth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MembershipTypeForMonth rename(String name) {
        return new MembershipTypeForMonth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MembershipTypeForMonth rename(Name name) {
        return new MembershipTypeForMonth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
