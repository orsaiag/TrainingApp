/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables;


import com.example.generated.Public;
import com.example.generated.tables.records.TrainerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trainer extends TableImpl<TrainerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trainer</code>
     */
    public static final Trainer TRAINER = new Trainer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainerRecord> getRecordType() {
        return TrainerRecord.class;
    }

    /**
     * The column <code>public.trainer.id</code>.
     */
    public final TableField<TrainerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('\"Trainer_id_seq\"'::regclass)", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.trainer.name</code>.
     */
    public final TableField<TrainerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.trainer.address</code>.
     */
    public final TableField<TrainerRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.trainer.phone</code>.
     */
    public final TableField<TrainerRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Trainer(Name alias, Table<TrainerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trainer(Name alias, Table<TrainerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.trainer</code> table reference
     */
    public Trainer(String alias) {
        this(DSL.name(alias), TRAINER);
    }

    /**
     * Create an aliased <code>public.trainer</code> table reference
     */
    public Trainer(Name alias) {
        this(alias, TRAINER);
    }

    /**
     * Create a <code>public.trainer</code> table reference
     */
    public Trainer() {
        this(DSL.name("trainer"), null);
    }

    public <O extends Record> Trainer(Table<O> child, ForeignKey<O, TrainerRecord> key) {
        super(child, key, TRAINER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Trainer as(String alias) {
        return new Trainer(DSL.name(alias), this);
    }

    @Override
    public Trainer as(Name alias) {
        return new Trainer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trainer rename(String name) {
        return new Trainer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trainer rename(Name name) {
        return new Trainer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
